[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.RabbitMQ.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.RabbitMQ.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"ServiceControl.Transports.RabbitMQ, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
namespace NServiceBus
{
    public class ManagementApiConfiguration
    {
        public ManagementApiConfiguration(string url) { }
        public ManagementApiConfiguration(string url, string userName, string password) { }
        public string Password { get; }
        public string Url { get; }
        public string UserName { get; }
    }
    public static class NonPersistentDeliveryModeExtensions
    {
        public static void UseNonPersistentDeliveryMode(this NServiceBus.PublishOptions options) { }
        public static void UseNonPersistentDeliveryMode(this NServiceBus.ReplyOptions options) { }
        public static void UseNonPersistentDeliveryMode(this NServiceBus.SendOptions options) { }
    }
    public delegate long PrefetchCountCalculation(int maximumConcurrency);
    public enum QueueType
    {
        Classic = 0,
        Quorum = 1,
    }
    public class RabbitMQTransport : NServiceBus.Transport.TransportDefinition
    {
        public RabbitMQTransport(NServiceBus.RoutingTopology routingTopology, string connectionString) { }
        public RabbitMQTransport(NServiceBus.RoutingTopology routingTopology, string connectionString, bool enableDelayedDelivery) { }
        public System.Security.Cryptography.X509Certificates.X509Certificate2 ClientCertificate { get; set; }
        public System.TimeSpan HeartbeatInterval { get; set; }
        public NServiceBus.ManagementApiConfiguration ManagementApiConfiguration { get; set; }
        public System.Func<RabbitMQ.Client.Events.BasicDeliverEventArgs, string> MessageIdStrategy { get; set; }
        public System.TimeSpan NetworkRecoveryInterval { get; set; }
        public System.Action<NServiceBus.Transport.IOutgoingTransportOperation, RabbitMQ.Client.IBasicProperties> OutgoingNativeMessageCustomization { get; set; }
        public NServiceBus.PrefetchCountCalculation PrefetchCountCalculation { get; set; }
        public System.TimeSpan TimeToWaitBeforeTriggeringCircuitBreaker { get; set; }
        public bool UseExternalAuthMechanism { get; set; }
        public bool ValidateDeliveryLimits { get; set; }
        public bool ValidateRemoteCertificate { get; set; }
        public void AddClusterNode(string hostName, bool useTls) { }
        public void AddClusterNode(string hostName, int port, bool useTls) { }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receivers, string[] sendingAddresses, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public static class RabbitMQTransportSettingsExtensions
    {
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> AddClusterNode(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, string hostName, bool useTls) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> AddClusterNode(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, string hostName, int port, bool useTls) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> ConnectionString(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, System.Func<string> getConnectionString) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> ConnectionString(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, string connectionString) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> CustomMessageIdStrategy(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, System.Func<RabbitMQ.Client.Events.BasicDeliverEventArgs, string> customIdStrategy) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> DisableDurableExchangesAndQueues(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> DisableRemoteCertificateValidation(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> DoNotValidateDeliveryLimits(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> ManagementApiConfiguration(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, string url) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> ManagementApiConfiguration(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, string url, string userName, string password) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> PrefetchCount(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, ushort prefetchCount) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> PrefetchMultiplier(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, int prefetchMultiplier) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> SetClientCertificate(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, System.Security.Cryptography.X509Certificates.X509Certificate2 clientCertificate) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> SetClientCertificate(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, string path, string password) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> SetHeartbeatInterval(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, System.TimeSpan heartbeatInterval) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> SetNetworkRecoveryInterval(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, System.TimeSpan networkRecoveryInterval) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> TimeToWaitBeforeTriggeringCircuitBreaker(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, System.TimeSpan waitTime) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> UseConventionalRoutingTopology(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, NServiceBus.QueueType queueType) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> UseCustomRoutingTopology(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, System.Func<bool, NServiceBus.Transport.RabbitMQ.IRoutingTopology> topologyFactory) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> UseDirectRoutingTopology(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions, NServiceBus.QueueType queueType, System.Func<System.Type, string> routingKeyConvention = null, System.Func<string> exchangeNameConvention = null) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> UseExternalAuthMechanism(this NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.RabbitMQTransport> UseTransport<T>(this NServiceBus.EndpointConfiguration config)
            where T : NServiceBus.RabbitMQTransport { }
    }
    public class RoutingTopology
    {
        public static NServiceBus.RoutingTopology Conventional(NServiceBus.QueueType queueType, bool useDurableEntities = true) { }
        public static NServiceBus.RoutingTopology Custom(NServiceBus.Transport.RabbitMQ.IRoutingTopology routingTopology) { }
        public static NServiceBus.RoutingTopology Direct(NServiceBus.QueueType queueType, bool useDurableEntities = true, System.Func<System.Type, string> routingKeyConvention = null, System.Func<string> exchangeNameConvention = null) { }
    }
}
namespace NServiceBus.Transport.RabbitMQ
{
    public interface IRoutingTopology
    {
        System.Threading.Tasks.ValueTask BindToDelayInfrastructure(RabbitMQ.Client.IChannel channel, string address, string deliveryExchange, string routingKey, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask Initialize(RabbitMQ.Client.IChannel channel, System.Collections.Generic.IEnumerable<string> receivingAddresses, System.Collections.Generic.IEnumerable<string> sendingAddresses, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask Publish(RabbitMQ.Client.IChannel channel, System.Type type, NServiceBus.Transport.OutgoingMessage message, RabbitMQ.Client.BasicProperties properties, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask RawSendInCaseOfFailure(RabbitMQ.Client.IChannel channel, string address, System.ReadOnlyMemory<byte> body, RabbitMQ.Client.BasicProperties properties, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask Send(RabbitMQ.Client.IChannel channel, string address, NServiceBus.Transport.OutgoingMessage message, RabbitMQ.Client.BasicProperties properties, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask SetupSubscription(RabbitMQ.Client.IChannel channel, NServiceBus.Unicast.Messages.MessageMetadata type, string subscriberName, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask TeardownSubscription(RabbitMQ.Client.IChannel channel, NServiceBus.Unicast.Messages.MessageMetadata type, string subscriberName, System.Threading.CancellationToken cancellationToken = default);
    }
}